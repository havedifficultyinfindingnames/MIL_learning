import MIL.Common
import Mathlib.Topology.Instances.Real
import Mathlib.Analysis.NormedSpace.BanachSteinhaus

open Set Filter
open Topology Filter

variable {X : Type*} [MetricSpace X] (a b c : X)

#check (dist a b : ‚Ñù)
#check (dist_nonneg : 0 ‚â§ dist a b)
#check (dist_eq_zero : dist a b = 0 ‚Üî a = b)
#check (dist_comm a b : dist a b = dist b a)
#check (dist_triangle a b c : dist a c ‚â§ dist a b + dist b c)

-- Note the next three lines are not quoted, their purpose is to make sure those things don't get renamed while we're looking elsewhere.
#check EMetricSpace
#check PseudoMetricSpace
#check PseudoEMetricSpace

example {u : ‚Ñï ‚Üí X} {a : X} :
    Tendsto u atTop (ùìù a) ‚Üî ‚àÄ Œµ > 0, ‚àÉ N, ‚àÄ n ‚â• N, dist (u n) a < Œµ :=
  Metric.tendsto_atTop

example {X Y : Type*} [MetricSpace X] [MetricSpace Y] {f : X ‚Üí Y} :
    Continuous f ‚Üî
      ‚àÄ x : X, ‚àÄ Œµ > 0, ‚àÉ Œ¥ > 0, ‚àÄ x', dist x' x < Œ¥ ‚Üí dist (f x') (f x) < Œµ :=
  Metric.continuous_iff

example {X Y : Type*} [MetricSpace X] [MetricSpace Y] {f : X ‚Üí Y} (hf : Continuous f) :
    Continuous fun p : X √ó X ‚Ü¶ dist (f p.1) (f p.2) := by continuity

example {X Y : Type*} [MetricSpace X] [MetricSpace Y] {f : X ‚Üí Y} (hf : Continuous f) :
    Continuous fun p : X √ó X ‚Ü¶ dist (f p.1) (f p.2) :=
  continuous_dist.comp ((hf.comp continuous_fst).prod_mk (hf.comp continuous_snd))

example {X Y : Type*} [MetricSpace X] [MetricSpace Y] {f : X ‚Üí Y} (hf : Continuous f) :
    Continuous fun p : X √ó X ‚Ü¶ dist (f p.1) (f p.2) := by
  apply Continuous.dist
  exact hf.comp continuous_fst
  exact hf.comp continuous_snd

example {X Y : Type*} [MetricSpace X] [MetricSpace Y] {f : X ‚Üí Y} (hf : Continuous f) :
    Continuous fun p : X √ó X ‚Ü¶ dist (f p.1) (f p.2) :=
  (hf.comp continuous_fst).dist (hf.comp continuous_snd)

example {X Y : Type*} [MetricSpace X] [MetricSpace Y] {f : X ‚Üí Y} (hf : Continuous f) :
    Continuous fun p : X √ó X ‚Ü¶ dist (f p.1) (f p.2) :=
  hf.fst'.dist hf.snd'

example {f : ‚Ñù ‚Üí X} (hf : Continuous f) : Continuous fun x : ‚Ñù ‚Ü¶ f (x ^ 2 + x) := by
  apply hf.comp
  apply Continuous.add
  apply continuous_pow
  apply continuous_id

example {X Y : Type*} [MetricSpace X] [MetricSpace Y] (f : X ‚Üí Y) (a : X) :
    ContinuousAt f a ‚Üî ‚àÄ Œµ > 0, ‚àÉ Œ¥ > 0, ‚àÄ {x}, dist x a < Œ¥ ‚Üí dist (f x) (f a) < Œµ :=
  Metric.continuousAt_iff

variable (r : ‚Ñù)

example : Metric.ball a r = { b | dist b a < r } :=
  rfl

example : Metric.closedBall a r = { b | dist b a ‚â§ r } :=
  rfl

example (hr : 0 < r) : a ‚àà Metric.ball a r :=
  Metric.mem_ball_self hr

example (hr : 0 ‚â§ r) : a ‚àà Metric.closedBall a r :=
  Metric.mem_closedBall_self hr

example (s : Set X) : IsOpen s ‚Üî ‚àÄ x ‚àà s, ‚àÉ Œµ > 0, Metric.ball x Œµ ‚äÜ s :=
  Metric.isOpen_iff

example {s : Set X} : IsClosed s ‚Üî IsOpen (s·∂ú) :=
  isOpen_compl_iff.symm

example {s : Set X} (hs : IsClosed s) {u : ‚Ñï ‚Üí X} (hu : Tendsto u atTop (ùìù a))
    (hus : ‚àÄ n, u n ‚àà s) : a ‚àà s :=
  hs.mem_of_tendsto hu (eventually_of_forall hus)

example {s : Set X} : a ‚àà closure s ‚Üî ‚àÄ Œµ > 0, ‚àÉ b ‚àà s, a ‚àà Metric.ball b Œµ :=
  Metric.mem_closure_iff

example {u : ‚Ñï ‚Üí X} (hu : Tendsto u atTop (ùìù a)) {s : Set X} (hs : ‚àÄ n, u n ‚àà s) :
    a ‚àà closure s := by
  by_contra! h
  let sc_c := (closure s)·∂ú
  let B Œµ := Metric.ball a Œµ
  have : ‚àÉ Œµ > 0, B (2 * Œµ) ‚äÜ sc_c := by
    have : IsClosed (closure s) := isClosed_closure
    have : ‚àÉ Œµ > 0, B Œµ ‚äÜ sc_c := Metric.mem_nhds_iff.mp (IsClosed.compl_mem_nhds this h)
    rcases this with ‚ü®Œµ2, h1, h2‚ü©
    use 1 / 2 * Œµ2
    exact ‚ü®by linarith, by ring_nf; exact h2‚ü©
  rcases this with ‚ü®Œµ, Œµpos, hŒµ‚ü©
  have : ‚àÄ·∂† n in atTop, u n ‚àà B Œµ := hu (Metric.ball_mem_nhds a Œµpos)
  have : ‚àÄ·∂† n in atTop, u n ‚àà sc_c := by
    have h1 : B Œµ ‚äÜ B (2 * Œµ) := Metric.ball_subset_ball (by linarith)
    exact Eventually.mono this fun x ‚Ü¶ (fun a ‚Ü¶ hŒµ (h1 a))
  have h1 : ‚àÄ·∂† n in atTop, u n ‚àâ closure s := this
  have : ‚àÄ n, u n ‚àà closure s := fun n ‚Ü¶ subset_closure (hs n)
  have h2 : ‚àÄ·∂† n in atTop, u n ‚àà closure s := eventually_of_forall this
  have : False := by
    simp at h1
    simp at h2
    absurd h2; push_neg
    rcases h1 with ‚ü®N1, hN1‚ü©
    intro N2
    use max N1 N2
    exact ‚ü®Nat.le_max_right N1 N2, by apply hN1; exact Nat.le_max_left N1 N2‚ü©
  contradiction

example {x : X} {s : Set X} : s ‚àà ùìù x ‚Üî ‚àÉ Œµ > 0, Metric.ball x Œµ ‚äÜ s :=
  Metric.nhds_basis_ball.mem_iff

example {x : X} {s : Set X} : s ‚àà ùìù x ‚Üî ‚àÉ Œµ > 0, Metric.closedBall x Œµ ‚äÜ s :=
  Metric.nhds_basis_closedBall.mem_iff

example : IsCompact (Set.Icc 0 1 : Set ‚Ñù) :=
  isCompact_Icc

example {s : Set X} (hs : IsCompact s) {u : ‚Ñï ‚Üí X} (hu : ‚àÄ n, u n ‚àà s) :
    ‚àÉ a ‚àà s, ‚àÉ œÜ : ‚Ñï ‚Üí ‚Ñï, StrictMono œÜ ‚àß Tendsto (u ‚àò œÜ) atTop (ùìù a) :=
  hs.tendsto_subseq hu

example {s : Set X} (hs : IsCompact s) (hs' : s.Nonempty) {f : X ‚Üí ‚Ñù}
      (hfs : ContinuousOn f s) :
    ‚àÉ x ‚àà s, ‚àÄ y ‚àà s, f x ‚â§ f y :=
  hs.exists_forall_le hs' hfs

example {s : Set X} (hs : IsCompact s) (hs' : s.Nonempty) {f : X ‚Üí ‚Ñù}
      (hfs : ContinuousOn f s) :
    ‚àÉ x ‚àà s, ‚àÄ y ‚àà s, f y ‚â§ f x :=
  hs.exists_forall_ge hs' hfs

example {s : Set X} (hs : IsCompact s) : IsClosed s :=
  hs.isClosed

example {X : Type*} [MetricSpace X] [CompactSpace X] : IsCompact (univ : Set X) :=
  isCompact_univ

#check IsCompact.isClosed

example {X : Type*} [MetricSpace X] {Y : Type*} [MetricSpace Y] {f : X ‚Üí Y} :
    UniformContinuous f ‚Üî
      ‚àÄ Œµ > 0, ‚àÉ Œ¥ > 0, ‚àÄ {a b : X}, dist a b < Œ¥ ‚Üí dist (f a) (f b) < Œµ :=
  Metric.uniformContinuous_iff

example {X : Type*} [MetricSpace X] [CompactSpace X]
      {Y : Type*} [MetricSpace Y] {f : X ‚Üí Y}
    (hf : Continuous f) : UniformContinuous f := by
  rw [Metric.uniformContinuous_iff]
  intro Œµ Œµpos
  let œÜ := fun p : X √ó X ‚Ü¶ dist (f p.1) (f p.2)
  have œÜ_continuous : Continuous œÜ := Continuous.dist hf.fst' hf.snd'
  let K := { p | Œµ ‚â§ œÜ p }
  have K_compact : IsCompact K := by
    have : IsClosed K := isClosed_le continuous_const œÜ_continuous
    exact this.isCompact
  rcases eq_empty_or_nonempty K with h | h
  ¬∑ use 1
    simp
    intro a b _
    have : (a, b) ‚àâ K := by simp [h]
    simpa [K]
  ¬∑ rcases K_compact.exists_forall_le h continuous_dist.continuousOn with ‚ü®‚ü®a, b‚ü©, abK, dyK‚ü©
    use dist a b
    constructor
    ¬∑ simp; push_neg
      intro aeqb
      have : Œµ ‚â§ 0 := by simpa [K, œÜ, *] using abK
      linarith
    ¬∑ intro x y
      contrapose!
      intro xyinK
      exact dyK (x, y) xyinK

example (u : ‚Ñï ‚Üí X) :
    CauchySeq u ‚Üî ‚àÄ Œµ > 0, ‚àÉ N : ‚Ñï, ‚àÄ m ‚â• N, ‚àÄ n ‚â• N, dist (u m) (u n) < Œµ :=
  Metric.cauchySeq_iff

example (u : ‚Ñï ‚Üí X) :
    CauchySeq u ‚Üî ‚àÄ Œµ > 0, ‚àÉ N : ‚Ñï, ‚àÄ n ‚â• N, dist (u n) (u N) < Œµ :=
  Metric.cauchySeq_iff'

example [CompleteSpace X] (u : ‚Ñï ‚Üí X) (hu : CauchySeq u) :
    ‚àÉ x, Tendsto u atTop (ùìù x) :=
  cauchySeq_tendsto_of_complete hu

open BigOperators

open Finset

theorem cauchySeq_of_le_geometric_two' {u : ‚Ñï ‚Üí X}
    (hu : ‚àÄ n : ‚Ñï, dist (u n) (u (n + 1)) ‚â§ (1 / 2) ^ n) : CauchySeq u := by
  rw [Metric.cauchySeq_iff']
  intro Œµ Œµ_pos
  obtain ‚ü®N, hN‚ü© : ‚àÉ N : ‚Ñï, 1 / 2 ^ N * 2 < Œµ := by
    have : Tendsto (fun N : ‚Ñï ‚Ü¶ (1 / 2 ^ N * 2 : ‚Ñù)) atTop (ùìù 0) := by
      rw [‚Üê zero_mul (2 : ‚Ñù)]
      apply Tendsto.mul
      simp_rw [‚Üê one_div_pow (2 : ‚Ñù)]
      apply tendsto_pow_atTop_nhds_zero_of_lt_one <;> linarith
      exact tendsto_const_nhds
    rcases(atTop_basis.tendsto_iff (nhds_basis_Ioo_pos (0 : ‚Ñù))).mp this Œµ Œµ_pos with ‚ü®N, _, hN‚ü©
    exact ‚ü®N, by simpa using (hN N left_mem_Ici).2‚ü©
  use N
  intro n hn
  obtain ‚ü®k, rfl : n = N + k‚ü© := le_iff_exists_add.mp hn
  calc
    dist (u (N + k)) (u N) = dist (u (N + 0)) (u (N + k)) := dist_comm (u (N + k)) (u N)
    _ ‚â§ ‚àë i in range k, dist (u (N + i)) (u (N + (i + 1))) := dist_le_range_sum_dist (fun i ‚Ü¶ u (N + i)) k
    _ ‚â§ ‚àë i in range k, (1 / 2 : ‚Ñù) ^ (N + i) := sum_le_sum (fun i _ ‚Ü¶ hu (N + i))
    _ = 1 / 2 ^ N * ‚àë i in range k, (1 / 2 : ‚Ñù) ^ i := by simp_rw [‚Üê one_div_pow, pow_add, ‚Üê mul_sum]
    _ ‚â§ 1 / 2 ^ N * 2 :=
      (mul_le_mul_of_nonneg_left (sum_geometric_two_le _)
        (one_div_nonneg.mpr (pow_nonneg (zero_le_two : (0 : ‚Ñù) ‚â§ 2) _)))
    _ < Œµ := hN

open Metric

example [CompleteSpace X] (f : ‚Ñï ‚Üí Set X) (ho : ‚àÄ n, IsOpen (f n)) (hd : ‚àÄ n, Dense (f n)) :
    Dense (‚ãÇ n, f n) := by
  let B : ‚Ñï ‚Üí ‚Ñù := fun n ‚Ü¶ (1 / 2) ^ n
  have Bpos : ‚àÄ n, 0 < B n := fun _ ‚Ü¶ pow_pos (by norm_num) _
  /- Translate the density assumption into two functions `center` and `radius` associating
    to any n, x, Œ¥, Œ¥pos a center and a positive radius such that
    `closedBall center radius` is included both in `f n` and in `closedBall x Œ¥`.
    We can also require `radius ‚â§ (1/2)^(n+1)`, to ensure we get a Cauchy sequence later. -/
  have :
    ‚àÄ (n : ‚Ñï) (x : X),
      ‚àÄ Œ¥ > 0, ‚àÉ y : X, ‚àÉ r > 0, r ‚â§ B (n + 1) ‚àß closedBall y r ‚äÜ closedBall x Œ¥ ‚à© f n := by
    intro n x Œ¥ Œ¥pos
    have : x ‚àà closure (f n) := hd n x
    rcases Metric.mem_closure_iff.mp this (Œ¥ / 2) (by linarith [Œ¥pos]) with ‚ü®y, yinfn, xynear‚ü©
    have : ‚àÉ r > 0, closedBall y r ‚äÜ f n := nhds_basis_closedBall.mem_iff.mp (isOpen_iff_mem_nhds.mp (ho n) y yinfn)
    rcases this with ‚ü®r, rpos, hr‚ü©
    let rmin := min (min (Œ¥ / 2) r) (B (n + 1))
    have rminpos : 0 < rmin := lt_min (lt_min (by linarith [Œ¥pos]) rpos) (Bpos (n + 1))
    have rminleB : rmin ‚â§ B (n + 1) := min_le_right _ _
    have rminleŒ¥ : rmin ‚â§ Œ¥ / 2 := (min_le_left _ _).trans (min_le_left _ _)
    have rminler : rmin ‚â§ r := (min_le_left _ _).trans (min_le_right _ _)
    use y, rmin
    simp [rminpos, rminleB]
    constructor <;> intro z zinb <;> simp at *
    ¬∑ calc
        dist z x ‚â§ dist z y + dist y x := dist_triangle _ _ _
        _ = dist z y + dist x y := by rw [dist_comm x y]
        _ ‚â§ Œ¥ / 2 + Œ¥ / 2 := by linarith
        _ = Œ¥ := by simp
    ¬∑ exact hr (le_trans zinb rminler)
  choose! center radius Hpos HB Hball using this
  intro x
  rw [mem_closure_iff_nhds_basis nhds_basis_closedBall]
  intro Œµ Œµpos
  /- `Œµ` is positive. We have to find a point in the ball of radius `Œµ` around `x`
    belonging to all `f n`. For this, we construct inductively a sequence
    `F n = (c n, r n)` such that the closed ball `closedBall (c n) (r n)` is included
    in the previous ball and in `f n`, and such that `r n` is small enough to ensure
    that `c n` is a Cauchy sequence. Then `c n` converges to a limit which belongs
    to all the `f n`. -/
  let F : ‚Ñï ‚Üí X √ó ‚Ñù := fun n ‚Ü¶
    Nat.recOn n (Prod.mk x (min Œµ (B 0)))
      fun n p ‚Ü¶ Prod.mk (center n p.1 p.2) (radius n p.1 p.2)
  let c : ‚Ñï ‚Üí X := fun n ‚Ü¶ (F n).1
  let r : ‚Ñï ‚Üí ‚Ñù := fun n ‚Ü¶ (F n).2
  have rpos : ‚àÄ n, 0 < r n := by
    intro n
    induction' n with n hn
    ¬∑ exact lt_min Œµpos (Bpos 0)
    ¬∑ exact Hpos n (c n) (r n) hn
  have rB : ‚àÄ n, r n ‚â§ B n := by
    intro n
    induction' n with n hn
    ¬∑ exact min_le_right _ _
    ¬∑ exact HB n (c n) (r n) (rpos n)
  have incl : ‚àÄ n, closedBall (c (n + 1)) (r (n + 1)) ‚äÜ closedBall (c n) (r n) ‚à© f n :=
    fun n ‚Ü¶ Hball n (c n) (r n) (rpos n)
  have cdist : ‚àÄ n, dist (c n) (c (n + 1)) ‚â§ B n := by
    intro n
    rw [dist_comm]
    have A : c (n + 1) ‚àà closedBall (c (n + 1)) (r (n + 1)) := mem_closedBall_self (rpos (n + 1)).le
    have I :=
      calc
        closedBall (c (n + 1)) (r (n + 1)) ‚äÜ closedBall (c n) (r n) := (incl n).trans (inter_subset_left _ _)
        _ ‚äÜ closedBall (c n) (B n) := closedBall_subset_closedBall (rB n)
    exact I A
  have : CauchySeq c := cauchySeq_of_le_geometric_two' cdist
  -- as the sequence `c n` is Cauchy in a complete space, it converges to a limit `y`.
  rcases cauchySeq_tendsto_of_complete this with ‚ü®y, ylim‚ü©
  -- this point `y` will be the desired point. We will check that it belongs to all
  -- `f n` and to `ball x Œµ`.
  use y
  have I : ‚àÄ n, ‚àÄ m ‚â• n, closedBall (c m) (r m) ‚äÜ closedBall (c n) (r n) := by
    intro n
    refine' Nat.le_induction _ fun m _ h ‚Ü¶ _
    ¬∑ exact Subset.rfl
    ¬∑ exact (incl m).trans ((Set.inter_subset_left _ _).trans h)
  have yball : ‚àÄ n, y ‚àà closedBall (c n) (r n) := by
    intro n
    refine' isClosed_ball.mem_of_tendsto ylim _
    refine' (Filter.eventually_ge_atTop n).mono fun m nlem ‚Ü¶ _
    exact I n m nlem (mem_closedBall_self (rpos _).le)
  constructor
  ¬∑ rw [Set.mem_iInter]
    intro n
    have : closedBall (c (n + 1)) (r (n + 1)) ‚äÜ f n :=
      Subset.trans (incl n) (inter_subset_right _ _)
    exact this (yball (n + 1))
  ¬∑ simp at *
    calc
      dist y x ‚â§ r 0 := yball 0
      _ ‚â§ Œµ := min_le_left _ _
